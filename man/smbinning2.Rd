% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scoremodel.R
\name{smbinning2}
\alias{smbinning2}
\title{Auxiliary Function: Optimally Binning of Given Variable}
\usage{
smbinning2(df, x, binMethod, p, maxcat, aliquots)
}
\arguments{
\item{df}{A dataframe only with Xs and Y variables, and the last variable must be Y, see details.}

\item{x}{A name character of one x variable(if x variable is a character variable, it must be converted to factor in advance), \code{x} must not have a dot, see details.}

\item{binMethod}{An integer from 1 to 4, indicates 4 different binning methods(see details).}

\item{p}{A numeric, means percentage of records per bin, from 0 to 0.5.}

\item{maxcat}{An integer, specifies the maximum number of categories.}

\item{aliquots}{An integer, specifies the number of bins for equal-frequency or equal-interval binning method.}
}
\value{
A dataframe with cutpoints and corresponding woes
}
\description{
Auxiliary function: \code{smbinning2} is an enhanced and integrated optimal binning function for score model, which contains 4 different binning methods(see details) for numeric and factor variables.
}
\details{
the last variable in \code{df} must be binary response variable (0,1). Integer (int) is required. Name of y must not have a dot. Name "default" is not allowed.
\code{binMethod=c(1,2,3,4)}, meanings:
  1 means optimal binning, and equal-frequency binning is an alternative when optimal binning is not available.
  2 means optimal binning, and equal-interval binning is an alternative when optimal binning is not available.
  3 means equal-frequency binning.
  4 means equal-interval binning.
when \code{x} represents a continuous variable: At least 5 different values(excluding NA). Value Inf is not allowed.
when \code{x} represents a factor variable: At least 2 different values(excluding NA). Value Inf is not allowed.
}
\examples{
data(CreditData)
mysample <- convertType(CreditData, toType="fac")
splitresult <- splitData(mysample, size = 0.7, ifpercent = TRUE)
train <- splitresult[[1]]
test <- splitresult[[2]]
smbinning2(train, x = "bscore", binMethod = 1, p = 0.05, maxcat = 10, aliquots = 5)
}
\seealso{
Other dataset binning and woe-encoding functions: \code{\link{convertCutPoints}},
  \code{\link{dfBinningFun}},
  \code{\link{executeBinFun_df}},
  \code{\link{executeBinFun}}, \code{\link{genConfigList}},
  \code{\link{preBinningFun}},
  \code{\link{woeEncodeFun_df}}, \code{\link{woeEncodeFun}}
}
